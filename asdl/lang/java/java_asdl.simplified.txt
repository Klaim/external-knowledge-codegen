## ASDL's 4 builtin types are
identifier, int, string, constant


cu = CompilationUnit(package? package, importdeclaration* imports, typedeclaration* types)

package = PackageDeclaration(fieldmodifier* modifiers, annotation* annotations, string? documentation ,identifier name)

importdeclaration = Import(identifier path, constant? static, constant? wildcard)

annotation = NormalAnnotation(expression* element, identifier name)
      | MarkerAnnotation(identifier name)
      | SingleElementAnnotation(expression element, identifier name)

dottedname = Identifier(identifier id)
      | PackageOrTypeName(dottedname left, dotop op, identifier right)
dotop = Dot

#typedeclaration = ClassDeclaration(annotation* annotations, typedeclaration* body, string? documentation, type? extends, dottedname* implements, fieldmodifier* modifiers, identifier name, type_parameter* type_parameters)
#      | InterfaceDeclaration(annotation* annotations, string? documentation, fieldmodifier* modifiers, identifier name, type_parameter* type_parameters, dottedname? extends, typedeclaration* body)
#      | EnumDeclaration(fieldmodifier* modifiers, annotation* annotations, string? documentation, identifier name, dottedname* implements, enumbody body)
#      | AnnotationDeclaration(fieldmodifier* modifiers, annotation* annotations, string? documentation, identifier name, annotationbodydeclaration* body)

enumbody = EnumBody(enumconstant* constants, enumdeclaration* declarations)

enumconstant = EnumConstantDeclaration(annotation* annotations, string? documentation, fieldmodifier* modifiers, identifier name, argument* arguments, statement* body)

enumdeclaration = EnumDeclaration(fieldmodifier* modifiers, annotation* annotations, string? documentation ,identifier name, dottedname* implements, enumbody body)

# classbodydeclaration  = ClassDeclaration(annotation* annotations, classbodydeclaration* body, string? documentation, type? extends, dottedname* implements, fieldmodifier* modifiers, identifier name, type_parameter* type_parameters)

typedeclaration = ClassDeclaration(annotation* annotations, typedeclaration* body, string? documentation, type? extends, dottedname* implements, fieldmodifier* modifiers, identifier name, type_parameter* type_parameters)
      | EnumDeclaration(fieldmodifier* modifiers, annotation* annotations, string? documentation ,identifier name, dottedname* implements, enumbody body)
      | InterfaceDeclaration(annotation* annotations, string? documentation, fieldmodifier* modifiers, identifier name, type_parameter* type_parameters, type* extends, typedeclaration* body)
      | InstanceInitializer(statement block)
      | StaticInitializer(statement block)
      | ConstructorDeclaration(fieldmodifier* modifiers, annotation* annotations, string? documentation, type_parameter* type_parameters, identifier name, parameter* parameters, identifier* throws, statement body)
      | MethodDeclaration(string? documentation, fieldmodifier* modifiers, annotation* annotations, type_parameter* type_parameters, type return_type, identifier name, parameter* parameters, identifier* throws, statement body)
      | FieldDeclaration(string? documentation, fieldmodifier* modifiers, annotation* annotations, type type, declarator* declarators)
      | AnnotationDeclaration(fieldmodifier* modifiers, annotation* annotations, string? documentation, identifier name, annotationbodydeclaration* body)
      | ConstantDeclaration(string? documentation, fieldmodifier* modifiers, annotation* annotations, type type, declarator* declarators)

annotationbodydeclaration = AnnotationMethod(fieldmodifier* modifiers, annotation* annotations, identifier name, type return_type, int* dimensions, identifier? default)

type_parameter = TypeParameter(identifier name, type* extends)

fieldmodifier = Modifier(constant value)

parameter = FormalParameter(annotation* annotations, fieldmodifier* modifiers, identifier name, type type, constant? varargs)
      | InferredFormalParameter(identifier name)

statement = Statement(identifier? label)
      | ForStatement(identifier? label, forcontrol control, statement body)
      | DoStatement(identifier? label, expression condition, statement body)
      | WhileStatement(identifier? label, expression condition, statement body)
      | MethodInvocation(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type_argument* type_arguments, argument* arguments, identifier member)
      | StatementExpression(identifier? label, statement expression)
      | LocalVariableDeclaration(fieldmodifier* modifiers, annotation* annotations, type type, declarator* declarators)
      | ReturnStatement(identifier? label, expression expression)
      | IfStatement(identifier? label, expression condition, statement then_statement, statement? else_statement)
      | BlockStatement(identifier? label, statement* statements)
      | TryStatement(identifier? label, identifier? resources, statement block, catch* catches, statement? finally_block)
      | ThrowStatement(identifier? label, expression expression)
      | SwitchStatement(identifier? label, expression expression, case* cases)
      | BreakStatement(identifier? label, identifier? goto)
      | ContinueStatement(identifier? label, identifier? goto)
      | AssertStatement(identifier? label, expression condition, expression? value)
      | SynchronizedStatement(identifier? label, expression lock, statement block)

case = SwitchStatementCase(identifier* case, statement* statements)

catch = CatchClause(identifier? label, catch_clause_parameter parameter, statement block)

catch_clause_parameter = CatchClauseParameter(fieldmodifier* modifiers, annotation* annotations, identifier* types, identifier name)

forcontrol = ForControl(expression* init, expression condition, expression* update)
      | EnhancedForControl(expression var, statement iterable)


# | Primary(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors)
expression = VariableDeclaration(fieldmodifier* modifiers, annotation* annotations, type type, declarator* declarators)
      | Literal(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, string value)
      | BinaryOperation(infix_operator operator, member_reference operandl, member_reference operandr)
      | MemberReference(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, identifier member)
      | TernaryExpression(expression condition, expression if_true, expression if_false)
      | ArraySelector(expression index)
      | Assignment(expression expressionl, expression value, assign_operator type)
      | This(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors)
      | Cast(type type, expression expression, selector* selectors)
      | MethodReference(expression expression, identifier method, type_argument* type_arguments)
      | LambdaExpression(parameter* parameters, statement body)
      | Invocation(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type_argument* type_arguments, argument* arguments)
      | ExplicitConstructorInvocation(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type_argument* type_arguments, argument* arguments)
      | SuperConstructorInvocation(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type_argument* type_arguments, argument* arguments)
      | MethodInvocation(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type_argument* type_arguments, argument* arguments, identifier member)
      | SuperMethodInvocation(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type_argument* type_arguments, argument* arguments, identifier member)
      | SuperMemberReference(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, identifier member)
      | ClassReference(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type type)
      | VoidClassReference(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type type)
      | Creator(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type type)
      | ArrayCreator(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type type, int* dimensions, expression? initializer)
      | ClassCreator(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type type, identifier* constructor_type_arguments, argument* arguments, statement* body)
      | InnerClassCreator(prefix_operator* prefix_operators, postfix_operator* postfix_operators, identifier? qualifier, selector* selectors, type type, identifier* constructor_type_arguments, argument* arguments, statement body)
      | ArrayInitializer(expression* initializers)
      | ElementValuePair(identifier name, expression value)

type = Void(constant void)
      |BasicType(identifier name, int* dimensions)
      | ReferenceType(identifier name, int* dimensions, type_argument* arguments, identifier? sub_type)

declarator = VariableDeclarator(identifier name, int* dimensions, array_initializer? initializer)

array_initializer = ArrayInitializer(expression* initializers)

type_argument = TypeArgument(identifier? type, identifier? pattern_type)

boolean = True | False

infix_operator = Operator(constant operator)

prefix_operator = Operator(constant operator)

postfix_operator = Operator(constant operator)

assign_operator = Operator(constant operator)
