## ASDL's 4 builtin types are
identifier, int, string, constant

cu = TranslationUnit(statement* subnodes)

statement = AccessSpecDecl(identifier access_spec)
      | BreakStmt(statement* subnodes)
      | CXXConstructorDecl(identifier name, identifier noexcept, identifier default, statement* subnodes)
      | CXXConversionDecl(identifier name, statement* subnodes)
      | CXXCtorInitializer(identifier name, statement* subnodes)
      | CXXDestructorDecl(identifier name, constant virtual, constant default, constant noexcept, statement* subnodes)
      | CXXForRangeStmt(statement* subnodes)
      | CXXMethodDecl(string? documentation, identifier name, constant virtual, identifier return_type, identifier noexcept, identifier const, identifier default, statement* subnodes)
      | CXXRecordDecl(identifier name, identifier kind, identifier bases, constant complete_definition, statement* subnodes)
      | CaseStmt(statement* subnodes)
      | ClassTemplateDecl(statement* subnodes)
      | CompoundStmt(statement* subnodes)
      | ContinueStmt(statement* subnodes)
      | DeclStmt(statement* subnodes)
      | DefaultStmt(statement* subnodes)
      | DoStmt(expression cond, statement* subnodes)
      | EmptyDecl
      | EnumConstantDecl(identifier name, statement* subnodes)
      | EnumDecl(identifier name, statement* subnodes)
      | ExprStmt(expression* subnodes)
      | ExprWithCleanups(statement* subnodes)
      | FieldDecl(identifier name, type type, statement* subnodes)
      | ForStmt(expression? init, expression? cond, expression? inc, statement* subnodes)
      | FriendDecl(identifier type)
      | FullComment(string comment)
      | FunctionDecl(string? documentation, identifier name, identifier return_type, statement* subnodes, string? variadic)
      | FunctionTemplateDecl(statement* subnodes)
      | IfStmt(expression cond, statement* subnodes)
      | NamespaceDecl(identifier name, statement* subnodes)
      | NonTypeTemplateParmDecl(identifier name, identifier type, statement* subnodes)
      | NullStmt
      | OverrideAttr
      | ParmVarDecl(identifier name, identifier type, statement* subnodes)
      | ReturnStmt(statement* subnodes)
      | SwitchStmt(statement* subnodes)
      | TemplateTypeParmDecl(identifier name, statement* subnodes)
      | TypeRef(identifier name)
      | TypedefDecl(identifier name, identifier type)
      | UsingDirectiveDecl(identifier name)
      | VarDecl(identifier name, type type, identifier storage_class, identifier array, identifier init, constant implicit, constant referenced, expression* subnodes)
      | WhileStmt(expression cond, statement* subnodes)

expression =  ArraySubscriptExpr(expression* subnodes)
      | BinaryOperator(constant opcode, expression* subnodes)
      | CStyleCastExpr(type type, expression* subnodes)
      | ConditionalOperator(expression* subnodes)
      | CXXBindTemporaryExpr(expression* subnodes)
      | CXXBoolLiteralExpr(constant value)
      | CXXConstructExpr(identifier type, expression* subnodes)
      | CXXDefaultArgExpr
      | CXXFunctionalCastExpr(identifier type, expression* subnodes)
      | CXXMemberCallExpr(expression* subnodes)
      | CXXNewExpr(expression* subnodes)
      | CXXNullPtrLiteralExpr
      | CXXOperatorCallExpr(expression left, expression op, expression right)
      | CXXStdInitializerListExpr(expression* subnodes)
      | CXXTemporaryObjectExpr(identifier type, expression* subnodes)
      | CXXThisExpr(expression* subnodes)
      | CallExpr(expression* subnodes)
      | CharacterLiteral(identifier value)
      | ConstantExpr(identifier value, expression* subnodes)
      | DeclRefExpr(identifier name, identifier kind, expression* subnodes)
      | FloatingLiteral(identifier type, identifier value)
      | ImplicitCastExpr(type type, expression* subnodes)
      | ImplicitValueInitExpr(expression* subnodes)
      | InitListExpr(expression* subnodes)
      | IntegerLiteral(identifier type, identifier value)
      | MaterializeTemporaryExpr(expression* subnodes)
      | MemberExpr(identifier name, identifier op, expression* subnodes)
      | ParenExpr(expression* subnodes)
      | StringLiteral(identifier value)
      | UnaryExprOrTypeTraitExpr(identifier name, expression? expr, type? type)
      | UnaryOperator(constant opcode, constant postfix, expression* subnodes)

type = QualType(identifier type)
