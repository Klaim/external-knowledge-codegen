## ASDL's 4 builtin types are
identifier, int, string, constant

cu = TranslationUnit(statement* stmts)

declaration = AccessSpecDecl(access_spec access_spec)
            | CXXConstructorDecl(identifier name, exception_spec? exception, default_mode? defaulted, statement? body, attribute* attributes, parameter* parameters, cxx_ctor_initializer* initializers)
            | CXXConversionDecl(identifier name, constant? inline, exception_spec? exception, constant? const, statement? body, attribute* attributes)
            | CXXDestructorDecl(identifier name, exception_spec? exception, constant? virtual, default_mode? defaulted, statement? body, attribute* attributes)
            | CXXMethodDecl(identifier name, type return_type, constant? storage, constant? variadic, constant? inline, exception_spec? exception, constant? virtual, constant? const, default_mode? defaulted, method_attr* method_attributes, constant? ref_qualifier, statement? body, attribute* attributes, parameter* parameters)
            | CXXRecordDecl(identifier name, identifier kind, base* bases, constant complete, declaration* decls)
            | ClassTemplateDecl(statement* subnodes)
            | EmptyDecl
            | EnumDecl(identifier? name, enum_field* fields)
            | FieldDecl(identifier name, type type, expression? init, attribute* attributes)
            | FriendDecl(identifier type)
            | FunctionDecl(identifier name, type return_type, constant? storage, constant? variadic, constant? inline, exception_spec? exception, statement? body, attribute* attributes, parameter* parameters)
            | FunctionTemplateDecl(statement* subnodes)
            | NamespaceDecl(identifier? name, declaration* decls)
            | NonTypeTemplateParmDecl(identifier name, identifier type, statement* subnodes)
            | StaticAssertDecl(expression cond, constant? message)
            | TemplateTypeParmDecl(identifier name, statement* subnodes)
            | TypedefDecl(identifier name, type type)
            | TypeAliasDecl(identifier name, type type)
            | UsingDecl(identifier name)
            | UsingDirectiveDecl(identifier name)
            | VarDecl(identifier name, type type, constant? storage_class, constant init_mode, constant? implicit, constant? referenced, expression? init, attribute* attributes, constant? tls)

statement = BreakStmt
          | CXXForRangeStmt(declaration decl, expression range, statement body)
          | CXXTryStmt(statement body, exception_handler* handlers)
          | CaseStmt(expression pattern, statement stmt)
          | CompoundStmt(statement* stmts)
          | ContinueStmt
          | DeclStmt(declaration* decls)
          | DefaultStmt(statement stmt)
          | DoStmt(expression cond, statement body)
          | ExprStmt(expression expr)
          | ForStmt(declarations_or_expression? init, declaration_or_expression? cond, expression? inc, statement body)
          | FullComment(string comment)
          | GCCAsmStmt(constant string, constrained_expression* output_operands, constrained_expression* input_operands, constant* clobbers, constant* labels)
          | GotoStmt(identifier target)
          | IfStmt(declaration_or_expression cond, statement true_body, statement? false_body)
          | IndirectGotoStmt(expression expr)
          | LabelStmt(identifier name, statement stmt)
          | NullStmt
          | OverrideAttr
          | ReturnStmt(expression? value)
          | SwitchStmt(expression cond, statement body)
          | TypeRef(identifier name)
          | WhileStmt(declaration_or_expression cond, statement body)

expression = AddrLabelExpr(identifier name)
           | ArraySubscriptExpr(expression base, expression index)
           | AtomicExpr(identifier name, expression* args)
           | BinaryConditionalOperator(expression cond, expression false_expr)
           | BinaryOperator(constant opcode, expression lhs, expression rhs)
           | CStyleCastExpr(type type, expression expr)
           | CXXBindTemporaryExpr(expression expr)
           | CXXBoolLiteralExpr(constant value)
           | CXXConstructExpr(expression* args)
           | CXXDefaultArgExpr
           | CXXDeleteExpr(expression expr, constant? is_array)
           | CXXFunctionalCastExpr(type type, expression expr)
           | CXXMemberCallExpr(expression bound_method, expression* args)
           | CXXNewExpr(type type, expression* args, expression? placement, expression? array_size, expression? placement)
           | CXXNullPtrLiteralExpr
           | CXXOperatorCallExpr(expression left, expression op, expression right)
           | CXXReinterpretCastExpr(type type, expression expr)
           | CXXStaticCastExpr(type type, expression expr)
           | CXXStdInitializerListExpr(expression* subnodes)
           | CXXTemporaryObjectExpr(type type, expression* args)
           | CXXThisExpr
           | CXXThrowExpr(expression? expr)
           | CXXTypeidExpr(expression? expr, type? type)
           | CallExpr(expression callee, expression* args)
           | CharacterLiteral(identifier value)
           | CompoundAssignOperator(constant opcode, expression lhs, expression rhs)
           | ConditionalOperator(expression cond, expression true_expr, expression false_expr)
           | ConstantExpr(identifier value, expression expr)
           | DeclRefExpr(identifier name, identifier kind)
           | ExprWithCleanups(expression expr)
           | FloatingLiteral(type type, identifier value)
           | ImaginaryLiteral(type type, identifier value)
           | ImplicitCastExpr(type type, expression expr)
           | ImplicitValueInitExpr
           | InitListExpr(expression* values)
           | IntegerLiteral(type type, identifier value)
           | LambdaExpr(parameter* parameters, statement body)
           | MaterializeTemporaryExpr(expression expr)
           | MemberExpr(identifier name, identifier op, expression? expr)
           | OpaqueValueExpr(expression expr)
           | ParenExpr(expression expr)
           | StmtExpr(statement stmt)
           | StringLiteral(constant value)
           | UnaryExprOrTypeTraitExpr(identifier name, expression? expr, type? type)
           | UnaryOperator(constant opcode, constant postfix, expression expr)
           | UserDefinedLiteral(constant suffix, expression expr)

parameter = ParmVarDecl(type type, identifier? name, expression? default)

declarations_or_expression = DeclsOrExpr(declaration* decls, expression? expr)

declaration_or_expression = DeclOrExpr(declaration? decl, expression? expr)

cxx_ctor_initializer = CXXCtorInitializer(identifier name, expression* args)


type = AutoType(auto_keyword keyword)
     | BuiltinType(identifier name)
     | ComplexType(type type)
     | ConstantArrayType(type type, constant size)
     | DecayedType(type type)
     | DecltypeType(constant repr)
     | ElaboratedType(type type, identifier? qualifiers)
     | EnumType(identifier name)
     | FunctionProtoType(type return_type, type* parameter_types)
     | IncompleteArrayType(type type)
     | LValueReferenceType(type type)
     | ParenType(type type)
     | PointerType(type type)
     | QualType(identifier? qualifiers, type type)
     | RValueReferenceType(type type)
     | RecordType(identifier name)
     | TypedefType(identifier name, type type)
     | TypeOfExprType(constant repr)
     | VectorType(type type, constant size)

enum_field = EnumConstantDecl(identifier name, expression? init)

constrained_expression = ConstrainedExpression(expression expr, constant constraint)

attribute = AlignedAttr(expression? size)
          | AliasAttr(identifier aliasee)
          | AllocAlignAttr(constant index)
          | AllocSizeAttr(constant size, constant? nmemb)
          | AlwaysInlineAttr
          | AnyX86InterruptAttr
          | CleanupAttr(identifier func)
          | ColdAttr
          | ConstAttr
          | ConstructorAttr(constant? priority)
          | DeprecatedAttr(constant? msg)
          | DestructorAttr(constant? priority)
          | ErrorAttr(constant msg)
          | FlattenAttr
          | FormatAttr(identifier archetype, constant fmt_index, constant vargs_index)
          | FormatArgAttr(constant fmt_index)
          | GNUInlineAttr
          | HotAttr
          | IFuncAttr(identifier name)
          | LeafAttr
          | MallocAttr
          | NoInlineAttr
          | NoInstrumentFunctionAttr
          | NoProfileFunctionAttr
          | NoReturnAttr
          | NoSanitizeAttr(constant* options)
          | NoSplitStackAttr
          | NoStackProtectorAttr
          | NonNullAttr(constant* indices)
          | PackedAttr
          | PatchableFunctionEntryAttr(constant count, constant? offset)
          | PureAttr
          | RetainAttr
          | ReturnsNonNullAttr
          | ReturnsTwiceAttr
          | SectionAttr(constant section)
          | SentinelAttr(constant? value, constant? offset)
          | TargetAttr(constant desc)
          | TargetClonesAttr(constant desc)
          | TLSModelAttr(constant tls_model)
          | UnavailableAttr(constant? msg)
          | UninitializedAttr
          | UnusedAttr
          | UsedAttr
          | VisibilityAttr(constant visibility)
          | WarnUnusedResultAttr
          | WeakAttr
          | WeakRefAttr(identifier? name)

base = Base(identifier name, access_spec? access_spec)

access_spec = Public
            | Protected
            | Private

default_mode = Default
             | Delete
             | PureVirtual

method_attr = FinalAttr
            | OverrideAttr

exception_spec = Throw(identifier* args)
               | NoExcept(constant? repr)
               | NoThrow

exception_handler = CXXCatchStmt(declaration? decl, statement body)

auto_keyword = Auto | DecltypeAuto | GNUAutoType
